#!/usr/bin/ruby

$:.unshift(File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib')))
$stdout.sync = true

require 'arson'
require 'arson/colorful'
require 'optparse'
require 'logger'

$Log = Logger.new STDOUT
$Log.level = Logger::WARN

# Check if the YAML is outdated or doesn't exist. In either case, write the YAML
# again.
#
# The YAML is considered 'outdated' if the user's YAML doesn't contain the same
# keys as the defaults. We do not respect foreign keys however. Should fix that.
if (Arson::Config::LOADED_YAML and (Arson::Config::LOADED_YAML.keys.sort != Arson::Config::DEFAULTS.keys.sort)) or !File.exists? Arson::Config::FILE_PATH
	Arson::Config.write
end

options = Hash.new(nil)
options[:download] = 0
ARGV.unshift "-h" if ARGV.empty?
opts = OptionParser.new do |opts|
	opts.banner = "Usage: arson [options]"

	opts.on("-s", "--search", "Search for packages") do
		options[:action] ||= :search
	end

	opts.on("-d", "--download", "Download the exact package name", "Repeating this will download other dependencies in AUR") do
		options[:action] || :download
		options[:download] += 1
	end

	opts.on("-u", "--upgrade", "Check for upgrades") do
		options[:action] ||= :upgrade
	end

	opts.on("--debug", "Enable debugging statements") do
		options[:debug] = true
	end

	opts.on_tail("-h", "--help", "Show this message") do
		puts opts
		exit 0
	end

	opts.on_tail("--version", "Show version") do
		puts "arson v#{Arson::VERSION.join('.')}"
		puts "Copyright (C) 2008 Colin Shea <colin@evaryont.me>"
		puts "Licensed under the GPLv3, all rights reserved"
		exit 0
	end

end.parse!
p ARGV if options[:debug]

if options[:action] and ARGV.empty?
	warn "arson: Missing names of packages"
	exit 1
end

case options[:action]
when :upgrade
	print "Checking for upgrades..."
	upgrades = Arson.check_upgrades
	unless upgrades.empty?
		print "\n"
		upgrades.each do |line, new_version|
			puts "#{line.strip} #{Arson.colorful("Green", new_version)}"
		end
	else
		puts "Nothing to update"
	end
	exit 0
when :download
	exit_code = 0
	ARGV.each do |pkg|
		if pkg = Arson.find_exact(pkg)
			p pkg if options[:debug]
			Arson.download(pkg)
		else
			warn "arson: No such package '#{pkg}'"
			exit_code = 1
		end
	end
	exit exit_code
when :search || nil
	Arson.search(ARGV).each do |pkg|
		name = Arson.colorful("White", pkg['Name'])
		name = Arson.colorful("Red", name) if pkg["OutOfDate"] == "1"
		if Arson::Config["show_category"] and Arson::Categories[pkg['CategoryID'].to_i] and Arson::Categories[pkg['CategoryID'].to_i] != "nil"
			category = "-#{Arson::Categories[pkg['CategoryID'].to_i]}"
		else
			category = ""
		end

		puts <<-HERE
#{Arson.colorful("Magenta", "aur#{category}")}/#{name} #{Arson.colorful("Green",pkg['Version'])}
	#{pkg['Description']}
		HERE
	end
end

Arson::Config.write if Arson::Config.modified
if Arson::Config["run_pacman"]
	print ">> Running pacman" if options[:debug]
	if File.exists? "/usr/bin/pacman-color" and Arson::Config["color"]
		print "-color" if options[:debug]
		exec "/usr/bin/pacman-color -Ss #{ARGV.join(' ')}"
	else
		exec "/usr/bin/pacman -Ss #{ARGV.join(' ')}"
	end
end
