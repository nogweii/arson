#!/usr/bin/ruby

$:.unshift(File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib')))
$stdout.sync = true

require 'arson'
require 'arson/colorful'
require 'trollop'
require 'logger'

$Log = Logger.new STDOUT
$Log.level = Logger::WARN
$Log.progname = "Arson"

# Check if the YAML is outdated or doesn't exist. In either case, write the YAML
# again.
#
# The YAML is considered 'outdated' if the user's YAML doesn't contain the same
# keys as the defaults. We do not respect foreign keys however. Should fix that.
if (Arson::Config::LOADED_YAML and (Arson::Config::LOADED_YAML.keys.sort != Arson::Config::DEFAULTS.keys.sort)) or !File.exists? Arson::Config::FILE_PATH
	Arson::Config.write
end

global_opts = Trollop::options do
	version <<-EOS
arson v#{Arson::VERSION.join('.')}
Copyright (C) 2008 Colin Shea <colin@evaryont.me>
Licensed under the GPLv3, all rights reserved
EOS
	banner <<-EOS
Arson, the hot AUR search helper.

Usage: arson [ OPTIONS ] search TERM
       arson [ OPTIONS ] download PACKAGE [ PACKAGE ... ]
       arson [ OPTIONS ] upgrade [ PACKAGE ... ]

For help on individual commands, try 'arson COMMAND --help'.

OPTIONS can be one or more of the following:
EOS
	opt :verbose, "Be more verbose", :short => '-v'
	opt :debug, "Be even more verbose", :short => '-d'
	stop_on %w(search download upgrade)
end

cmd = ARGV.shift
cmd_opts = case cmd
	   when 'search'
		   Trollop::options do
			   banner <<-EOS
Search for packages whose names contain the search term.
EOS
		   end
	   when 'download'
		   Trollop::options do
			   banner <<-EOS
Download named packages.

Options:
EOS
			   opt :dependencies, "Also download direct dependencies", :short => '-D'
		   end
	   when 'upgrade'
		   Trollop::options do
			   banner <<-EOS
Look for upgradeable packages. If no package names are given, search
for upgrades to all packages installed from AUR.
EOS
		   end
	   else
		   warn "Unknown command: #{cmd}"
		   exit 1
	   end

$Log.level = Logger::INFO if global_opts[:verbose]
$Log.level = Logger::DEBUG if global_opts[:debug]

$Log.debug "Global options: #{global_opts}"
$Log.debug "Subcommand: #{cmd}"
$Log.debug "Subcommand options: #{cmd_opts}"
$Log.debug "Subcommand arguments: #{ARGV}"

case cmd
when "upgrade"
	print "Checking for upgrades..."
	upgrades = Arson.check_upgrades ARGV
	unless upgrades.empty?
		print "\n"
		upgrades.each do |line, new_version|
			puts "#{line.strip} #{Arson.colorful("Green", new_version)}"
		end
	else
		puts "Nothing to update"
	end
when "download"
	if ARGV.empty?
		puts "No package names given"
		exit 2
	end
	ARGV.each do |pkg|
		if pkg = Arson.find_exact(pkg)
			$Log.info "Downloading #{pkg}"
			Arson.download(pkg, cmd_opts[:dependencies])
		else
			warn "arson: No such package '#{pkg}'"
			exit 1
		end
	end
when "search"
	if ARGV.empty?
		puts "No search terms given"
		exit 2
	end
	Arson.search(ARGV).each do |pkg|
		name = Arson.colorful("White", pkg['Name'])
		name = Arson.colorful("Red", name) if pkg["OutOfDate"] == "1"
		if Arson::Config["show_category"] and Arson::Categories[pkg['CategoryID'].to_i] and Arson::Categories[pkg['CategoryID'].to_i] != "nil"
			category = "-#{Arson::Categories[pkg['CategoryID'].to_i]}"
		else
			category = ""
		end

		puts <<-HERE
#{Arson.colorful("Magenta", "aur#{category}")}/#{name} #{Arson.colorful("Green",pkg['Version'])}
	#{pkg['Description']}
		HERE
	end
end

Arson::Config.write if Arson::Config.modified
if Arson::Config["run_pacman"]
	print ">> Running pacman" if options[:debug]
	if File.exists? "/usr/bin/pacman-color" and Arson::Config["color"]
		print "-color" if options[:debug]
		exec "/usr/bin/pacman-color -Ss #{ARGV.join(' ')}"
	else
		exec "/usr/bin/pacman -Ss #{ARGV.join(' ')}"
	end
end

# vim: sw=8 sts=8 noet
